package main

import (
	"bufio"
	"compress/gzip"
	"crypto/md5"
	"encoding/hex"
	"flag"
	"fmt"
	"hash"
	"io"
	"io/ioutil"
	"mime"
	"os"
	"path"
	"path/filepath"
	"regexp"
	"strings"

	"github.com/iancoleman/strcase"
)

var (
	input  = flag.String("input", "", "The path to the folder containing the assets")
	output = flag.String("output", "", "The output filename")
	pkg    = flag.String("package", "main", "The package name")

	files       = map[string]string{}
	filesType   = map[string]string{}
	regFuncName = regexp.MustCompile(`[^a-zA-Z0-9_]`)
)

// ByteWriter takes text input and writes them as hexadecimal bytes
type ByteWriter struct {
	io.Writer
	c      int
	digest hash.Hash
	hashed []byte
}

func (w *ByteWriter) Write(p []byte) (n int, err error) {
	if len(p) == 0 {
		return
	}
	for n = range p {
		_, _ = fmt.Fprintf(w.Writer, "\\x%02x", p[n])
	}

	n++
	w.digest.Write(p)
	w.hashed = w.digest.Sum(w.hashed)
	return
}

// need to pipe read to write
func recursiveRead(w io.Writer, folder string) {
	fileInfos, err := ioutil.ReadDir(folder)
	if err != nil {
		panic(err)
	}
	for _, info := range fileInfos {
		filename := path.Join(folder, info.Name())
		if info.IsDir() {
			recursiveRead(w, filename)
		} else {
			println("Reading File -> " + filename)
			relativePath := strings.Replace(filename, *input, "", -1)
			relativePath = path.Join("/", relativePath)
			fd, err := os.Open(filename)
			if err != nil {
				panic(err)
			}
			defer fd.Close()
			varname := strcase.ToLowerCamel(relativePath)
			_, err = fmt.Fprintf(w, "\n// %s file\nvar %s = []byte(\"", filename, varname)
			if err != nil {
				panic(err)
			}
			byteWriter := &ByteWriter{
				Writer: w,
				digest: md5.New(),
				hashed: []byte{},
			}
			gz, err := gzip.NewWriterLevel(byteWriter, gzip.BestCompression)
			if err != nil {
				panic(err)
			}
			_, err = io.Copy(gz, fd)
			if err != nil {
				panic(err)
			}
			err = gz.Close()
			if err != nil {
				panic(err)
			}
			_, err = fmt.Fprintf(w, "\")\n")
			if err != nil {
				panic(err)
			}
			files[relativePath] = hex.EncodeToString(byteWriter.digest.Sum(nil))
			filesType[relativePath] = mime.TypeByExtension(filepath.Ext(relativePath))
		}
	}
}

func filterName(name string) string {
	if strings.ToLower(name) == "/index.html" {
		return "\"/\", \"/index.html\""
	} else {
		return "\"" + name + "\""
	}
}

func main() {
	_ = mime.AddExtensionType(".ico", "image/x-icon")
	_ = mime.AddExtensionType(".eot", "font/eot")
	_ = mime.AddExtensionType(".tff", "font/tff")
	_ = mime.AddExtensionType(".woff", "application/font-woff")
	_ = mime.AddExtensionType(".woff2", "application/font-woff")
	println(fmt.Sprintf("go-embed 2.0.0"))
	flag.Parse()
	if *input == "" {
		flag.PrintDefaults()
		panic("-input is required.")
	}
	if *output == "" {
		flag.PrintDefaults()
		panic("-output is required.")
	}
	outputFile, err := os.Create(*output)
	if err != nil {
		panic(err)
	}
	defer outputFile.Close()
	bfd := bufio.NewWriter(outputFile)
	defer bfd.Flush()
	if _, err = fmt.Fprint(bfd, "// CODE GENERATED BY GO-EMBED. WARNING!! DO NOT EDIT!!"); err != nil {
		panic(err)
	}
	if _, err = fmt.Fprintf(bfd, `
package %s

import (
	"errors"
)

// ErrFileNotFound is returned whenever an asset cannot be found
var ErrFileNotFound = errors.New("Not Found")
`, *pkg); err != nil {
		panic(err)
	}
	recursiveRead(bfd, *input)
	if _, err = fmt.Fprintf(bfd, `
// Asset Gets the file from from the stored data and returns the data,
// the md5 hash of its content and its content type and an error if
// it is not found
func Asset(path string) ([]byte, string, string, error) {
	switch path {
`); err != nil {
		panic(err)
	}
	for p, h := range files {
		if _, err = fmt.Fprintf(bfd, `	case %s:
		return %s, "%s", "%s", nil
`, filterName(p), strcase.ToLowerCamel(p), h, filesType[p]); err != nil {
			panic(err)
		}
	}
	if _, err = fmt.Fprintf(bfd, `	default:
		return nil, "", "", ErrFileNotFound
	}
}
`); err != nil {
		panic(err)
	}
}
